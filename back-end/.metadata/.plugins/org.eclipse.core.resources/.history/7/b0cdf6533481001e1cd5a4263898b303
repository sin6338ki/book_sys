package com.sjy.book_sys.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.sjy.book_sys.exception.AlreadyRentException;
import com.sjy.book_sys.mapper.RentMapper;
import com.sjy.book_sys.model.RentDto;
import com.sjy.book_sys.model.RentListResDto;
import com.sjy.book_sys.model.ReturnDto;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class RentService {
	
	private final RentMapper rentMapper;
	
	/**
	 * 대여 요청 service
	 * @param rentDto
	 * @return 대여 성공시 "success rent", 실패시 "fail rent", 대여 불가능한 책이라면 예상 반납일
	 */
	public String applyRent(RentDto rentDto) {
		String isPossibleRent = "";
		try {
			//책 대여 가능 여부 확인
			isPossibleRent = isSameBook(rentDto);
			if(isPossibleRent.equals("possible rent")) {
				//Rent 테이블 insert
				int resultOfRent = rentMapper.insertRent(rentDto);
				//Book 테이블 대출 권수 추가
				int resultOfUpdateBookRentalCnt = rentMapper.updateBookRentalCnt(rentDto);
				//Member 테이블 대출 권수 추가
				int resultOfUpdateMemberRentCnt = rentMapper.updateMemberRentCnt(rentDto);
				//모두 성공시 success
				if(resultOfRent > 0 && resultOfUpdateBookRentalCnt > 0 && resultOfUpdateMemberRentCnt > 0){
					return "rent success";
				}else {
					return "fail rent";
				}
			}else {
				throw new AlreadyRentException(isPossibleRent);
			}
			
		}catch(Exception e) {
			e.printStackTrace();
			return "sever error";
		}
	}
	
	/**
	 * member 도서 대출 가능 권수 조회 service
	 * @param memberId
	 * @return 가능시 가능한 대출 권수, 불가능시 0
	 */
	public int findRentCnt(String memberId) {
		try {
			int possibleRentCnt = 5 - rentMapper.findRentCnt(memberId);
			if(possibleRentCnt > 0) {
				return possibleRentCnt;
			}else {
				return 0;
			}
		}catch(Exception e) {
			return -1;
		}
	}
	
	/**
	 * 대출 이력 조회 service
	 * @param bookId
	 * @return 성공시 List<RentListResDto> 실패시 NullPointerException
	 */
	public List<RentListResDto> findRentListById(String bookName){
		List<RentListResDto> rentList = null;
		//bookId "ALL"일 경우 전체 조회
		if(bookName.equals("ALL")) {
			return rentMapper.findAllRentList();
		}else {			
			rentList = rentMapper.findRentListById("%" + bookName + "%");
			if(rentList.size() > 0) {
				return rentList;
			}else {
				throw new NullPointerException("대출이력이 없습니다");
			}
		}
	}
	
	/**
	 * 도서 반납 service
	 * @param returnDto
	 * @return 성공시 return success, 실해시 return fail
	 */
	public String returnBook(ReturnDto returnDto) {
		//반납 처리
		int resultOfReturn = rentMapper.returnBook(returnDto.getRentId());
		//Book 테이블 대출 권수 감소
		int resultOfDecBookRentalCnt = rentMapper.decreaseBookRentalCnt(returnDto.getBookId());
		//Member 테이블 대출 권수 추가
		int resultOfDecMemberRentCnt = rentMapper.decreaseMemberRentCnt(returnDto.getMemberId());
		//모두 성공시 success
		if(resultOfReturn > 0 && resultOfDecBookRentalCnt > 0 && resultOfDecMemberRentCnt > 0){
			return "return success";
		}else {
			return "return fail";
		}
	}

	/**
	 * 책 대여 가능 여부 조회 service
	 * @param rentDto
	 * @return 가능시 "책 대여가 가능합니다" 불가능시 예상 반납일
	 */
	public String isSameBook(RentDto rentDto) {
		try {
			log.info("memberId, bookId : {}, {}", rentDto.getMemberId(), rentDto.getBookId());
			String resultOfIsSameBook = rentMapper.isSameBook(rentDto);
			return resultOfIsSameBook;
		}catch(NullPointerException e) {
			return "possible rent";
		}
	}
	
}
