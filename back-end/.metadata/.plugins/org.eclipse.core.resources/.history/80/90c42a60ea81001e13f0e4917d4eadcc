package com.sjy.book_sys.service;

import java.util.List;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.sjy.book_sys.exception.NoPermissionException;
import com.sjy.book_sys.mapper.MemberMapper;
import com.sjy.book_sys.model.LoginDto;
import com.sjy.book_sys.model.LoginResDto;
import com.sjy.book_sys.model.Member;
import com.sjy.book_sys.model.MemberDto;
import com.sjy.book_sys.model.MemberResDto;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * 회원 관련 Service
 * @author 신지영
 * @since 2023.11.08
 */
@Slf4j
@RequiredArgsConstructor
@Service
public class MemberService {
	
	private final MemberMapper memberMapper;
	private final PasswordEncoder passwordEncoder;
	
	/**
	 * 회원가입 메소드
	 * @return 회원가입 성공시 "success", 실패시 "fail"
	 */
	public String signup(MemberDto member) {
		member.encodingPassword(passwordEncoder);
		log.info("signup password : {}", member.getMemberPw());
		int isSuccess = memberMapper.signup(member);
		if(isSuccess > 0) {
			return "success";
		}else {
			return "fail";
		}
	}
	
	/**
	 * 중복 id 확인 메서드
	 * @return 중복 아이디 있는 경우 true, 없는 경우 false
	 */
	public boolean checkId(String memberId) {
		try {
			String sameId = memberMapper.checkId(memberId);
			log.info("sameId : ", sameId);
			
			if(sameId == null) {
				return false;
			}else {
				return true;
			}
		}catch(Exception e) {
			e.printStackTrace();
			return true;
		}

	}
	
	/**
	 * 로그인 메서드
	 * @param member (LoginDto)
	 * @return LoginResDto
	 */
	public LoginResDto login(LoginDto member) {
		Member inqueryResult = memberMapper.login(member);
		if(inqueryResult != null && passwordEncoder.matches(member.getMemberPw(), inqueryResult.getMemberPw())) {
			log.info("비밀번호 일치");
			if(inqueryResult.getMemberType() == 1) {					
				return LoginResDto.builder().memberId(inqueryResult.getMemberId()).memberType(inqueryResult.getMemberType()).build();
			}else{
				throw new NoPermissionException();
			}
		}else if(inqueryResult != null) {
			log.info("비밀번호 불일치");
			throw new IllegalArgumentException("비밀번호가 일치하지 않습니다.");
		}else {
			throw new IllegalArgumentException("사용자가 존재하지 않습니다.");
		}
	}
	
	/**
	 * 회원 검색 메서드
	 * @param keyword
	 * @return 회원 검색 결과 List<MemberResDto>
	 */
	public List<MemberResDto> findAllMember(String keyword) {
		List<MemberResDto> memberList = memberMapper.findAllMember("%"+keyword+"%");
		if(memberList.size() > 0) {
			return memberList;
		}else {
			throw new NullPointerException("회원 정보가 존재하지 않습니다.");
		}
	}
	
}
